plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-fabric:$architectury_api_version"


    modImplementation "net.fabricmc:fabric-loader:$fabric_loader_version"
    modImplementation "net.fabricmc.fabric-api:fabric-api:$fabric_api_version"

    // Cadmus
    modImplementation(group: "earth.terrarium.cadmus", name: "cadmus-fabric-${minecraft_version}", version: cadmus_version)

    // Xaeros
    modCompileOnly("maven.modrinth:xaeros-world-map:${xaeros_world_map_version}_Fabric_1.20")
    modLocalRuntime("maven.modrinth:xaeros-world-map:${xaeros_world_map_version}_Fabric_1.20")

    // Resourceful
    modApi(group: "com.teamresourceful.resourcefullib", name: "resourcefullib-fabric-${minecraft_version}", version: resourceful_lib_version)
}

processResources {
    inputs.property "version", version
    inputs.property "minecraft_version", minecraft_version
    inputs.property "loader_version", fabric_loader_version
    inputs.property "cadmus_version", cadmus_version
    inputs.property "xaeros_world_map_version", xaeros_world_map_version
    inputs.property "resourceful_lib_version", resourceful_lib_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": version,
                "minecraft_version": minecraft_version,
                "loader_version": fabric_loader_version,
                "cadmus_version": cadmus_version,
                "xaeros_world_map_version": xaeros_world_map_version,
                "resourceful_lib_version": resourceful_lib_version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
