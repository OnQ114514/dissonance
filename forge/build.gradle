plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    forge {
        mixinConfig "dissonance-common.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')

    forge "net.minecraftforge:forge:$forge_version"

    // MixinExtras
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.6"))
    implementation(include("io.github.llamalad7:mixinextras-forge:0.3.6"))

    forgeRuntimeLibrary("com.teamresourceful:yabn:1.0.3")
    forgeRuntimeLibrary("com.teamresourceful:bytecodecs:1.0.2")

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-forge:$architectury_api_version"

    // Xaeros
    modCompileOnly("maven.modrinth:xaeros-world-map:${xaeros_world_map_version}_Forge_1.20")
    modLocalRuntime("maven.modrinth:xaeros-world-map:${xaeros_world_map_version}_Forge_1.20")

    // FTB
    modImplementation("dev.ftb.mods:ftb-library-forge:${ftb_library_version}")
    modImplementation("dev.ftb.mods:ftb-teams-forge:${ftb_teams_version}")
    modImplementation("dev.ftb.mods:ftb-chunks-forge:${ftb_chunks_version}")

    // Resourceful
    modApi(group: "com.teamresourceful.resourcefullib", name: "resourcefullib-forge-${minecraft_version}", version: resourceful_lib_version)
}

processResources {
    inputs.property "version", version
    inputs.property "minecraft_version", minecraft_version
    inputs.property "xaeros_world_map_version", xaeros_world_map_version
    inputs.property "resourceful_lib_version", resourceful_lib_version
    filteringCharset "UTF-8"

    filesMatching('META-INF/mods.toml') {
        expand "version": version,
                "minecraft_version": minecraft_version,
                "xaeros_world_map_version": xaeros_world_map_version,
                "resourceful_lib_version": resourceful_lib_version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
